#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include <math.h>

#define L 10

int ip[L], im[L];

 //Periodic Boundary conditions
void pbc(){
  for (int i = 0; i < L; i++){
    ip[i] = (i+1)%L;
    im[i] = (i-1+L)%L;
  }
}

double randu(double x, double y){
  return (double)rand()/(double)RAND_MAX * (y-x) + x; 
}

void HotStart(int spin[L][L]){
  // Hot Start
  for (int i = 0; i < L; i++){
    for (int j = 0; j < L; j++){
      if( randu(0.0,1.0) < 0.5){
	spin[i][j] = 1;
	  }
      else{
	spin[i][j] = -1;
      }
    }
  }
}


void ColdStart(int spin[L][L]){
  for (int i = 0; i < L; i++){
    for (int j = 0; j < L; j++){
      spin[i][j] = 1;
    }
  }
}

void PrintConfiguration(int spin[L][L]){
  //Print Configuration
  for (int i = 0; i < L; i++){
    for (int j = 0; j < L; j++){
      printf("%2d  ",spin[i][j]);
    }
    printf("\n");
  }
}



//Energy difference
int DH(int spin[L][L], int i, int j){
  return 2*spin[i][j] * (spin[ip[i]][j] + spin[im[i]][j] + spin[i][ip[j]] + spin[i][im[j]]);
}


void Metropolis(int spin[L][L],int i, int j, double T){
  int DE;

  DE = DH(spin,i,j);
  if( DE <= 0){
    spin[i][j] *= -1;
  }
  else{
    if( randu(0.0,1.0) <= exp(-(double)DE/T)){
      spin[i][j] *= -1;
    }
  }
}

double EnergyDensity(int spin[L][L]){
  int E;
  E = 0;
  for (int i = 0; i < L; i++){
    for (int j = 0; j < L; j++){
      E += spin[i][j] * (spin[ip[i]][j] + spin[i][ip[j]]);
    }
  }
  return -(double)E/(double)(L*L);
}

void sweeps(int spin[L][L], double T){
  for (int i = 0; i < L; i++){
    for (int j = 0; j < L; j++){
      Metropolis(spin,i,j, T);
    }
  }
}

double avr(int N, double E[N]){
  double sum;
  sum = 0.0;
  for (int i = 0; i < N; i++){
    sum += E[i];
  }
  return sum/N;
}

double var(int N, double E[N]){
  double sum, avg;
  sum = 0.0;
  avg = avr(N,E);
  for (int i = 0; i < N; i++){
    sum += (E[i] - avg)*(E[i] - avg);
  }
  return sum/(N-1);
}

double std_err(int N, double E[N]){
  return sqrt(var(N,E)/N);
}

int main(){  
  
  int spin[L][L];
  const int Nt = 101, Nskip = 20, N = 1000;
  double Tmin = 0.1, Tmax = 4.0;
  double T[Nt], E[N];
  
  FILE *DataFile = fopen("measurements.dat","w");


  srand(time(NULL));

  //pbc
  pbc();
 
  ColdStart(spin);
  
  for (int i = 0; i < Nt; i++){
    T[i] = Tmin + (Tmax - Tmin)/(Nt - 1) * i;
  }



  for (int it = 0; it < Nt; it++){    
    for (int i_sweep = 0; i_sweep < 1000; i_sweep++){
      sweeps(spin,T[it]);
	//fprintf(DataFile,"%.15f\n",EnergyDensity(spin));
    }

    for (int i_sweep = 0; i_sweep < N; i_sweep++){
      for( int i_skip = 0; i_skip < Nskip; i_skip++){
	sweeps(spin,T[it]);
	  }
      E[i_sweep] = EnergyDensity(spin);
    }
    fprintf(DataFile,"%.15f %.15f %.15f\n",T[it],avr(N,E),std_err(N,E));
    
  }

  return 0;
}

